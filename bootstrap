#!/usr/bin/python

import os, sys, getopt
import threading, time

MSG_ARCHIPEL_WELCOME = """\
###############################################################################
#                                                                             #
#                                Archipel                                     #
#                                                                             #
###############################################################################

Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version. For more information
about the licence see <http://www.gnu.org/licenses/>

Welcome to the installation script of Archipel. Installation is automatic and 
default values should be ok most of the time.

"""


MSG_ARCHIPEL_INIT_SUBMODULES = """\
###############################################################################
#                                                                             #
#                        Archipel Submodules                                  #
#                                                                             #
###############################################################################

It seems that your local copy hasn't its submodules initialized. Bootstrap
will initialize it for you. Please wait.

"""

MSG_ARCHIPEL_SERVER_HEADER = """\
###############################################################################
#                                                                             #
#                            Archipel Server                                  #
#                                                                             #
###############################################################################

Welcome to the installation script of ArchipelServer. 
Note that you must be root in order to install this software. Please answer the 
following questions.

"""


MSG_ARCHIPEL_CLIENT_HEADER = """\
###############################################################################
#                                                                             #
#                            Archipel Client                                  #
#                                                                             #
###############################################################################

Welcome to the installation script of Archipel Client. You need to have the 
Cappuccino development environment installed in order to build this software.
You can grab it from http://cappuccino.org

"""

MSG_ARCHIPEL_END = """\
###############################################################################
#                                                                             #
#                                Archipel                                     #
#                                                                             #
###############################################################################

All the requested operation have been executed. If you need more help, please
visit the folowing : 
 * Main project page : http://archipelproject.org
 * Wiki              : https://github.com/primalmotion/Archipel/wiki
 * IRC channel       : irc://freenode.net/#archipel
 * Twitter           : http://twitter.com/ArchipelProject

If you find any bug, please tell us using our tracker :
 * Official tracker  : https://github.org/primalmotion/Archipel/issues
"""

class Spinner(threading.Thread):
    
    def __init__(self, delay=0.2):
        threading.Thread.__init__(self);
        self.sequence = ["#   ", "##  ", "### ", "####", " ###", "  ##", "   #", "    " ];
        self.on = True;
        self.delay = delay
        self.start()
    
    
    def run(self):
        i = 0
        while self.on:
            sys.stdout.write("\033[33m [%s]\033[0m\r" % self.sequence[i])
            sys.stdout.flush()
            i += 1;
            if i >= len(self.sequence):
                i = 0;
            time.sleep(self.delay)
    
    
    def stop(self):
        self.on = False;
    



# User interaction
def ask(message, answers=None, default=None):
    question = " * " + message
    if answers and default:
        question += " ["
        for a in answers:
            a = a
            if default and a in (default): a = "\033[32m" + a + "\033[0m"
            question += a + "/"
        question = question[:-1]
        question += "]"
        
    if not answers and default:
        question += " \033[32m" + default + "\033[0m"
        
    question += " : "
    
    resp = raw_input(question)
    
    if default:
        if resp == "": resp = default;
    
    if answers and default:
        if not resp in answers and len(answers) > 0:
            resp = ask("\033[33mYou must select of the following answer\033[0m", answers, default);
    
    return resp


def ask_bool(message, default="y"):
    if ask(message, ["y", "n"], default) == "y":
        return True
    return False




# tests

def test_cmd(cmd):
    if os.system("which %s > /dev/null 2>&1" % cmd) != 0:
        return False
    return True


def test_cmd_or_die(cmd, warn=False):
    if not test_cmd(cmd):
        if not warn:
            print "\033[31m\n * ERROR: You need %s\033[0m\n" % cmd
            sys.exit(1)
        else:
            print "\033[33m   - WARNING: You'll need %s to use certains features.\033[0m" % cmd


def test_basic_cmds():
    test_cmd_or_die("git")
    test_cmd_or_die("cp")
    test_cmd_or_die("mkdir")
    test_cmd_or_die("mv")
    test_cmd_or_die("echo")
    test_cmd_or_die("chmod")


def test_install_archipelserver():
    test_basic_cmds()
    test_cmd_or_die("openssl", warn=True)
    test_cmd_or_die("chkconfig", warn=True)


def test_install_archipelclient():
    test_basic_cmds()
    test_cmd_or_die("jake")
    test_cmd_or_die("capp")




# install client
def install_archipelclient():
    clear()
    print MSG_ARCHIPEL_CLIENT_HEADER
    
    print " Testing environment"
    test_install_archipelclient()
    print ""
    
    
    inst_export = None
    
    inst_growl          = ask_bool("Would you like to build GrowlCappuccino ?")
    inst_vnc            = ask_bool("Would you like to build VNCCappuccino ?")
    inst_strophe        = ask_bool("Would you like to build StropheCappuccino ?")
    inst_itunestabview  = ask_bool("Would you like to build iTunesTabView ?")
    inst_messageboard   = ask_bool("Would you like to build MessageBoard ?")
    inst_lpkit          = ask_bool("Would you like to build LPKit ?")
    inst_archipel       = ask_bool("Would you like to build Archipel Client ?")
    inst_appcapp        = ask_bool("Would you like to apply Cappuccino Framework ?")
    
    if ask_bool("Would you like to export Archipel ?"):
        inst_export    = ask("Where do you want to export Archipel Client ?", None, "~/")
        
    print ""
    print " Installation information"
    print "   - build GrowlCappuccino       : %s" % str(inst_growl)
    print "   - build VNCCappuccino         : %s" % str(inst_vnc)
    print "   - build StropheCappuccino     : %s" % str(inst_strophe)
    print "   - build iTunesTabView         : %s" % str(inst_itunestabview)
    print "   - build MessageBoard          : %s" % str(inst_messageboard)
    print "   - build LPKit                 : %s" % str(inst_lpkit)
    print "   - build Archipel Client       : %s" % str(inst_archipel)
    print "   - apply Cappuccino            : %s" % str(inst_appcapp)
    if inst_export: print "   - export to                   : %s" % inst_export
    print ""
    
    confirm = ask("Do you confirm ?", ["y", "n"], "y")
    if confirm == "n":
        print " \033[33m* Installation canceled by user\033[0m"
        sys.exit(0)
    
    if inst_growl:          build_growlcappuccino()
    if inst_vnc:            build_vnccappuccino()
    if inst_strophe:        build_strophecappuccino()
    if inst_itunestabview:  build_itunestabview()
    if inst_messageboard:   build_messageboard()
    if inst_lpkit:          build_lpkit()
    if inst_appcapp:        apply_cappuccino_frameworks()
    if inst_archipel:       build_archipel()
    if inst_export:         export_archipel(inst_export)
    
    print "\033[32m"
    print " Installation is now complete.\n"
    print "\033[0m"
    
    ask_bool("Continue ?")


def build_strophecappuccino():
    print " * Building StropheCappuccino";
    s = Spinner();
    os.system("cd ./StropheCappuccino && export CONFIG=Debug && jake  > /dev/null 2>&1 && export CONFIG=Release && jake > /dev/null 2>&1")
    s.stop()
    print "\033[32m * StropheCappuccino builded\033[0m"


def build_growlcappuccino():
    print " * Building GrowlCappuccino";
    s = Spinner();
    os.system("cd ./GrowlCappuccino && export CONFIG=Debug && jake  > /dev/null 2>&1 && export CONFIG=Release && jake > /dev/null 2>&1")
    s.stop()
    print "\033[32m * GrowlCappuccino builded \033[0m"


def build_vnccappuccino():
    print " * Building VNCCappuccino";
    s = Spinner();
    ret = os.system("cd ./VNCCappuccino && export CONFIG=Debug && jake  > /dev/null 2>&1 && export CONFIG=Release && jake > /dev/null 2>&1")
    s.stop()
    if ret != 0:
        print "\033[31mUnable to build Cappuccino\033[0m"
        sys.exit(1)
    print "\033[32m * VNCCappuccino builded\033[0m"


def build_itunestabview():
    print " * Building iTunesTabView";
    s = Spinner();
    ret = os.system("cd ./iTunesTabView && export CONFIG=Debug && jake  > /dev/null 2>&1 && export CONFIG=Release && jake > /dev/null 2>&1")
    s.stop()
    if ret != 0:
        print "\033[31mUnable to build iTunesTabView\033[0m"
        sys.exit(1)
    print "\033[32m * iTunesTabView builded\033[0m"


def build_messageboard():
    print " * Building MessageBoard";
    s = Spinner();
    ret = os.system("cd ./MessageBoard && export CONFIG=Debug && jake  > /dev/null 2>&1 && export CONFIG=Release && jake > /dev/null 2>&1")
    s.stop()
    if ret != 0:
        print "\033[31mUnable to build MessageBoard\033[0m"
        sys.exit(1)
    print "\033[32m * MessageBoard builded\033[0m"


def build_lpkit():
    print " * Building LPKit";
    s = Spinner();
    ret = os.system("cd ./LPKit && export CONFIG=Debug && jake build  > /dev/null 2>&1 && export CONFIG=Release && jake build > /dev/null 2>&1")
    s.stop()
    if ret != 0:
        print "\033[31mUnable to build LPKit\033[0m"
        sys.exit(1)
    print "\033[32m * LPKit builded\033[0m"


def build_archipel(exportpath=None):
    if exportpath:
        export = " --export=%s" % exportpath 
    else:
        export = ""
    print " * Building ArchipelClient"
    s = Spinner();
    os.system("cd ./ArchipelClient && ./buildArchipel -bag --config=Release %s > /dev/null 2>&1" % export)
    s.stop()
    print "\033[32m * ArchipelClient built\033[0m"


def apply_cappuccino_frameworks():
    print " * Adding Cappuccino framework"
    s = Spinner();
    os.system("/usr/local/narwhal/bin/capp gen -f ./ArchipelClient > /dev/null 2>&1")
    s.stop()
    print "\033[32m * Cappuccino added\033[0m"

def export_archipel(path):
    print " * Exporting archipel to %s" % path
    s = Spinner();
    os.system("cp -a ./ArchipelClient/Build/Release/Archipel %s > /dev/null 2>&1" % path)
    s.stop()
    print "\033[32m * Archipel Client exported\033[0m"

# install server
def install_archipelserver():
    clear()
    print MSG_ARCHIPEL_SERVER_HEADER
    
    print " Testing environment"
    test_install_archipelserver()
    print ""
    
    inst_bin = None
    inst_data = None
    inst_init = None
    inst_start = None
    inst_conf = None
    inst_cert = None
    inst_prefix = ""
    
    if ask_bool("Would you like to set a specific prefix ?"):
        inst_prefix = ask("What prefix do you want to use ?", None, inst_prefix)
    
    if ask_bool("Whould you like to install Archipel binary ?"):
        inst_bin    = ask("Where do you want to install ArchipelServer ?", None, "/usr/bin")
        
    if ask_bool("Whould you like to install Archipel default configuration ?"):
        inst_conf   = ask("Where do you want to install configuration ?", None, "/etc/archipel")
    
    if ask_bool("Whould you like to create Archipel data folder ?"):
        inst_data   = ask("Where do you want to ArchipelServer stores its datas ?", None, "/var/lib/archipel")
    
    if ask_bool("Would you like to install the init script ?"):
        inst_init   = ask("Where do you want to install init script ?", None, "/etc/init.d")
        if test_cmd("chkconfig"):
            inst_start  = ask_bool("Would you like to start archipel with the system ?")
    
    if test_cmd("openssl"):
        if inst_conf: 
            inst_cert = ask_bool("Would you like to generate the VNC certificates ?")
    
    
    print ""
    print " Installation information"
    if inst_bin:    print "   - binary folder        : %s" % inst_prefix + inst_bin
    if inst_data:   print "   - data folder          : %s" % inst_prefix + inst_data
    if inst_conf:   print "   - configuration folder : %s" % inst_prefix + inst_conf
    if inst_init:   print "   - install init script  : %s" % inst_init
    if inst_start:  print "   - start with system    : %s" % inst_start
    print ""
    
    confirm = ask("Do you confirm ?", ["y", "n"], "y")
    if confirm == "n":
        print " \033[33m* Installation canceled by user\033[0m"
        sys.exit(0)
    
    if inst_bin and not os.path.exists(inst_prefix + inst_bin):
        print " - creating folder %s" % inst_prefix + inst_bin
        s = Spinner()
        os.system("mkdir -p '%s'" % inst_prefix + inst_bin)
        s.stop()
            
    if inst_bin: 
        print " - installation ArchipelServer binary to %s" % inst_bin
        s = Spinner()
        os.system("cp -a ./ArchipelServer '%s'" %  inst_prefix + inst_bin)
        os.system("chmod -R 700 '%s'" %  inst_prefix + inst_bin)
        s.stop()
    
    if inst_conf and not os.path.exists(inst_prefix + inst_conf):
        s = Spinner()
        print " - creating folder %s" % inst_prefix + inst_conf
        os.system("mkdir -p '%s'" % inst_prefix + inst_conf)
        s.stop()
        
    if inst_conf:
        print " - installing configuration in %s" % inst_prefix + inst_conf
        s = Spinner()
        os.system("cp -a ./ArchipelServer/conf/archipel.conf '%s'" % inst_prefix + inst_conf)
        os.system("chmod -R 700 '%s'" % inst_prefix + inst_conf)
        s.stop()
        
    if inst_data and not os.path.exists(inst_prefix + inst_data):
        print " - creating folder %s" %  inst_prefix + inst_data
        s = Spinner()
        os.system("mkdir -p '%s'" % inst_prefix + inst_data)
        s.stop()
    
    if inst_init and not os.path.exists(inst_prefix + inst_init):
        print " - creating folder  %s" % inst_prefix + inst_init
        s = Spinner()
        os.system("mkdir -p '%s'" % inst_prefix + inst_init)
        s.stop()
            
    if inst_init:
        print " - installing init script to  %s" % inst_prefix + inst_init
        s = Spinner()
        os.system("cp -a ./ArchipelServer/archipel '%s'" % inst_prefix + inst_init)
        s.stop()
    
    if inst_init and inst_start:
        print " - setting archipel to be started with system"
        s = Spinner()
        os.system("chkconfig --level 345 archipel on")
        s.stop()
    
    if inst_cert:
        print " - generating the certificates for VNC"
        print "\n\033[35m*******************************************************************************"
        os.system("openssl req -new -x509 -days 365 -nodes -out '%s/vnc.pem' -keyout '%s/vnc.pem'" % (inst_prefix +inst_conf, inst_prefix +inst_conf))
        print "*******************************************************************************\033[0m"
    
    
    print "\033[32m"
    print " Installation is now complete.\n"
    print "\033[0m"
    
    ask_bool("Continue ?")



def clear():
    os.system("clear")


def git_init_submodules():
    if not os.path.exists(".submodules_initialized"):
        print MSG_ARCHIPEL_INIT_SUBMODULES
        print "\033[35m"
        os.system("git submodule update --init --recursive");
        print "\033[32mSubmodule are initialized.\033[0m\n"
        os.system("touch .submodules_initialized")
        confirm = ask("Continue ?", ["y", "n"], "y")
        clear()
        

if __name__ == "__main__":
    try:
        clear()
        
        git_init_submodules()
        
        print MSG_ARCHIPEL_WELCOME
        
        install_server = ask_bool("Would you like to install Archipel Server ?")
        install_client = ask_bool("Would you like to install Archipel Client ?")
        
        print "\n\nWe will now execute the following installation: "
        if install_server: print " - Archipel Server"
        if install_client: print " - Archipel Client"
        
        print " "
        
        confirm = ask("Do you confirm ?", ["y", "n"], "y")
        if confirm == "n":
            print " \033[33m* Installation canceled by user\033[0m"
            sys.exit(0)
        
        if install_server: install_archipelserver()
        
        if install_client: install_archipelclient()
        
        clear()
        print MSG_ARCHIPEL_END;
        
        
    except KeyboardInterrupt:
        print "\n\n\033[33m * Installation canceled by user\033[0m\n"
    
