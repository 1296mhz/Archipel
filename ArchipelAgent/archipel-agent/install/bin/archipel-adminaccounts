# -*- coding: utf-8 -*-
#
# archipel-adminaccounts.py
#
# Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
# This file is part of ArchipelProject
# http://archipelproject.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
from optparse import OptionParser
import xmpp
import archipelcore.pubsub

def connect(jid, password):
    xmppclient = xmpp.Client(jid.getDomain(), debug=[])
    if not xmppclient.connect():
        print "\033[31mERROR: cannot connect to the server. exiting\033[0m"
        sys.exit(0)
    if xmppclient.auth(jid.getNode(), password, "configurator") == None:
        print "\033[31mERROR: bad authentication. exiting\033[0m"
        sys.exit(0)
    return xmppclient


def perform(jid, password, pubsubserver, action):
    if not pubsubserver : pubsubserver = "pubsub." + jid.getDomain()
    xmppclient = connect(jid, password)
    nodeName = "/archipel/adminaccounts"
    pubSubNode = archipelcore.pubsub.TNPubSubNode(xmppclient, pubsubserver, nodeName)
    if action:
        if not pubSubNode.recover(wait=True):
            pubSubNode.create(wait=True)
        else:
            print "\033[31mERROR: The pubsub node /archipel/adminaccounts already exist\033[0m"
            return
        pubSubNode.configure({
                archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL: archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL_OPEN,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_PUBLISH_MODEL: archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL_AUTHORIZE,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_DELIVER_NOTIFICATION: 1,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_MAX_ITEMS: 100,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_PERSIST_ITEMS: 1,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_NOTIFY_RECTRACT: 1,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_DELIVER_PAYLOADS: 1,
                archipelcore.pubsub.XMPP_PUBSUB_VAR_SEND_LAST_PUBLISHED_ITEM: archipelcore.pubsub.XMPP_PUBSUB_VAR_SEND_LAST_PUBLISHED_ITEM_NEVER
        }, wait=True)
        print "\033[32mSUCCESS: pubsub node /archipel/adminaccounts created!\033[0m"
    else:
        if pubSubNode.recover(wait=True):
            pubSubNode.delete(wait=True)
        else:
            print "\033[31mERROR: The pubsub node /archipel/adminaccounts doesn't exist\033[0m"
            return
        print "\033[32mSUCCESS: pubsub node /archipel/adminaccounts deleted!\033[0m"


def insert_jid(jid, password, adminaccount, pubsubserver=None):
    if not pubsubserver : pubsubserver = "pubsub." + jid.getDomain()

    if not adminaccount.getNode() or not adminaccount.getDomain():
        print "\033[31mERROR: JID as to be in form user@domain\033[0m"
        sys.exit(1)

    if adminaccount.getResource():
        print "\033[31mERROR: JID must not has a resource set\033[0m"
        sys.exit(1)

    xmppclient = connect(jid, password)
    nodeName = "/archipel/adminaccounts"
    pubSubNode = archipelcore.pubsub.TNPubSubNode(xmppclient, pubsubserver, nodeName)
    if not pubSubNode.recover(wait=True):
        print "\033[31mERROR: The node /archipel/adminaccounts doesn't exist. create it first\033[0m"
        sys.exit(0)
    newAdminNode = xmpp.Node(tag="admin", attrs={"node": adminaccount.getNode(), "domain": adminaccount.getDomain()})
    if pubSubNode.add_item(newAdminNode, wait=True):
        print "\033[32mSUCCESS: JID %s has been inserted as admin account.\033[0m" % str(adminaccount)
    else:
        print "\033[31mERROR: Unable to add admin acount %s\033[0m" % str(adminaccount)

def remove_jid(jid, password, refID, pubsubserver=None):
    if not pubsubserver : pubsubserver = "pubsub." + jid.getDomain()
    xmppclient = connect(jid, password)
    nodeName = "/archipel/adminaccounts"
    pubSubNode = archipelcore.pubsub.TNPubSubNode(xmppclient, pubsubserver, nodeName)
    if not pubSubNode.recover(wait=True):
        print "\033[31mERROR: The node /archipel/adminaccounts doesn't exist. create it first\033[0m"
        sys.exit(0)
    if pubSubNode.remove_item(refID, wait=True):
        print "\033[32mSUCCESS: Admin account referenced %s has been removed.\033[0m" % str(refID)
    else:
        print "\033[31mERROR: Unable to remove admin acount with reference %s \033[0m" % str(refID)


def list_jid(jid, password, pubsubserver=None):
    if not pubsubserver : pubsubserver = "pubsub." + jid.getDomain()
    xmppclient = connect(jid, password)
    nodeName = "/archipel/adminaccounts"
    pubSubNode = archipelcore.pubsub.TNPubSubNode(xmppclient, pubsubserver, nodeName)
    if not pubSubNode.recover(wait=True):
        print "\033[31mERROR: The node /archipel/adminaccounts doesn't exist. create it first\033[0m"
        sys.exit(0)
    admins = pubSubNode.get_items()
    if len(admins) == 0:
        print "There is no admins accounts yet."
    for admin in admins:
        print "%s: %s@%s" % (admin.getAttr("id"), admin.getTag("admin").getAttr("node"), admin.getTag("admin").getAttr("domain"))


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-j", "--jid",
                        dest="jid",
                        help="set the JID to use",
                        metavar="JID")
    parser.add_option("-p", "--password",
                        dest="password",
                        help="set the password associated to the JID",
                        metavar="PASSWORD")
    parser.add_option("-P", "--pubsubserver",
                        dest="pubsubserver",
                        help="set the pubsubserver to use. if not given it will be pubsub.[jid.getDomain()]",
                        metavar="PUBSUBSERVER",
                        default=None)
    parser.add_option("-c", "--create",
                        action="store_true",
                        dest="action",
                        help="create the node (default action)",
                        metavar="ACTION",
                        default=True)
    parser.add_option("-d", "--delete",
                        action="store_false",
                        dest="action",
                        help="delete the node",
                        metavar="ACTION")
    parser.add_option("-i", "--insert",
                        dest="insert",
                        help="insert a new admin JID",
                        metavar="jid@domain")
    parser.add_option("-r", "--remove",
                        dest="remove",
                        help="remove an admin JID identified by the item ID",
                        metavar="jid@domain")
    parser.add_option("-l", "--list",
                        action="store_true",
                        dest="list",
                        help="list all existing JID",
                        metavar="LIST")

    options, args = parser.parse_args()

    if not options.jid or not options.password:
        parser.error("you must enter a JID and a PASSWORD. see --help for help")

    if options.list:
        list_jid(xmpp.JID(options.jid), options.password, options.pubsubserver)
    elif options.insert:
        insert_jid(xmpp.JID(options.jid), options.password, xmpp.JID(options.insert), options.pubsubserver)
    elif options.remove:
        remove_jid(xmpp.JID(options.jid), options.password, options.remove, options.pubsubserver)
    else:
        perform(xmpp.JID(options.jid), options.password, options.pubsubserver, options.action)