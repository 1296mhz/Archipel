#!/usr/bin/python -W ignore::DeprecationWarning
# -*- coding: utf-8 -*-
#
# runarchipel
#
# Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from optparse import OptionParser
import xmpp
import socket
from subprocess import check_call
from archipelcore.scriptutils import error

## error codes
ARCHIPEL_INIT_SUCCESS                   = 0
ARCHIPEL_INIT_ERROR_NO_CONFIG           = 1
ARCHIPEL_INIT_ERROR_NO_MODULE           = 2
ARCHIPEL_INIT_ERROR_BAD_LIBVIRT         = 3
ARCHIPEL_INIT_ERROR_UNKNOWN             = 4
ARCHIPEL_INIT_ERROR_CONNECTION          = 5
ARCHIPEL_INIT_ERROR_LOOP_INTERRUPTION   = 6
ARCHIPEL_INIT_ERROR_STATELESS_MODE      = 7

try:
    from archipelcore.utils import init_conf
    from archipel.archipelHypervisor import TNArchipelHypervisor
    from archipel.libvirtEventLoop import virEventLoopPureStart
except ImportError as ex:
    error("%s" % str(ex), code=ARCHIPEL_INIT_ERROR_NO_MODULE)

def format_version(info):
    """format the verson info"""
    if (len(info) == 2):
        print " - %s: %s" % (info[0], info[1])
    else:
        print " - %s: %s" % (info[0], info[1])
        for p in info[2]:
            print "     + \033[35m%s\033[0m" % p["identifier"]

def help():
    """display help"""
    print ARCHIPEL_CMD_HELP
    sys.exit(ARCHIPEL_INIT_SUCCESS)

def versions(option, opt, value, parser):
    import pkg_resources
    """print versions of all installed modules"""
    print "\033[32m* Archipel Agent version : \033[0m"
    format_version(("archipelagent", pkg_resources.get_distribution("archipel-agent").version))
    print "\n\033[32m* Installed plugins versions : \033[0m"
    for version_method in pkg_resources.iter_entry_points(group="archipel.plugin", name="version"):
        try:
            method  = version_method.load()
            format_version(method())
        except Exception as ex:
            error("unable to get the version of one plugin: %s" % ex, exit=False)
    sys.exit(ARCHIPEL_INIT_SUCCESS)

def test_libvirt():
    """test if all needed libvirt's functions are present"""
    try:
        import libvirt
    except:
        error("You need python libvirt module. I can't import it.", code=ARCHIPEL_INIT_ERROR_BAD_LIBVIRT)
    try:
        getattr(libvirt.virConnect, "domainEventRegisterAny")
    except:
        error("Your libvirt copy doesn't handle Events correctly. please update to 0.8.3+.", code=ARCHIPEL_INIT_ERROR_BAD_LIBVIRT)
        return False
    return True


### Stateless node functions

def stateless_read_kernel_parameters(path="/proc/cmdline"):
    """
    Read the kernel parameters
    @type path: string
    @param path: the path to the file containing the kernel params (Default: /proc/cmdline)
    @rtype: dict
    @return: dictionnary containing the archipel informations
    """
    f = open(path, "r")
    cmdline = f.read()
    f.close()
    tokens = cmdline.replace(" archipel_", "\narchipel_").split("\n")
    ret = {}
    for token in tokens:
        if token.startswith("archipel_"):
            ret[token.split("=", 1)[0]] = token.split("=", 1)[1].strip()

    # check we have all the needed kernel parameters
    if not "archipel_storage_mount_command" in ret:
        raise Exception("you need to set the kernel parameter archipel_storage_mount_command")
    if not "archipel_storage_config_general" in ret:
        raise Exception("you need to set the kernel parameter archipel_storage_config_general")
    if not "archipel_storage_config_local" in ret:
        raise Exception("you need to set the kernel parameter archipel_storage_config_local")

    return ret

def stateless_mount_storage(mount_command):
    """
    Mount the given file system. for example, give:
        mount -t cifs //server/share /vm -o password=secret,user=toto
    @type mount_command: string
    @param mount_command: the command to run to mount.
    """
    check_call(mount_command, shell=True)

def main(config):
    """
    main function of Archipel
    @type config: ConfigParser
    @param config: the origin config parser coming from the cli
    """
    test_libvirt()

    # starting the libvirt event loop
    virEventLoopPureStart()

    # If we are in a stateless mode, read the stateless node configuration
    # from the kernel parameters
    if config.has_option("GLOBAL", "stateless_node") and config.getboolean("GLOBAL", "stateless_node"):
        try:
            stateless_mode_parameters = stateless_read_kernel_parameters("/tmp/cmdline.test") # @TODO change me!
            stateless_mount_storage(stateless_mode_parameters["archipel_storage_mount_command"])
            config = init_conf([stateless_mode_parameters["archipel_storage_config_general"], stateless_mode_parameters["archipel_storage_config_local"]])
            if "archipel_pre_init_script" in stateless_mode_parameters:
                check_call(stateless_mode_parameters["archipel_pre_init_script"], shell=True)
        except Exception as ex:
            error("Stateless node initialization error: %s" % str(ex), code=ARCHIPEL_INIT_ERROR_STATELESS_MODE)

    jid         = xmpp.JID(config.get("HYPERVISOR", "hypervisor_xmpp_jid"))
    password    = config.get("HYPERVISOR", "hypervisor_xmpp_password")
    database    = config.get("HYPERVISOR", "hypervisor_database_path")
    name        = config.get("HYPERVISOR", "hypervisor_name")
    jid.setResource(socket.gethostname())
    hyp = TNArchipelHypervisor(jid, password, config, name, database)
    try:
        hyp.connect()
    except Exception as ex:
        error("Cannot connect using JID %s. Initialization aborted: %s" % (jid, str(ex)), code=ARCHIPEL_INIT_ERROR_CONNECTION)
    try:
        hyp.loop()
    except Exception as ex:
        if hyp.xmppclient.isConnected():
            hyp.xmppclient.disconnect()
        error("Exception has stopped the hypervisor main loop: %s" % str(ex), code=ARCHIPEL_INIT_ERROR_LOOP_INTERRUPTION)


if __name__ == "__main__":
    """
    Main loop of the program
    """
    parser = OptionParser()
    parser.add_option("-c", "--config",
                        dest="config",
                        help="the config file to use",
                        metavar="CONFIG",
                        default="/etc/archipel/archipel.conf")
    parser.add_option("-v", "--version",
                        action="callback",
                        help="display the version of all components",
                        callback=versions)
    parser.add_option("-n", "--nofork",
                        action="store_true",
                        dest="nofork",
                        help="do not fork. For testing purpose")

    options, args = parser.parse_args()
    try:
        config = init_conf(options.config.split(","))
    except:
        error("Unable to read configuration file %s" % options.config, code=ARCHIPEL_INIT_ERROR_NO_CONFIG)

    if not options.nofork:
        try:
            pid = os.fork()
            if pid > 0: sys.exit(0)
        except Exception as e:
            error("Unknown error: %s" % str(e), code=ARCHIPEL_INIT_ERROR_UNKNOWN)
        os.chdir("/")
        os.setsid()
        os.umask(0)
        try:
            pid = os.fork()
            if pid > 0: sys.exit(0)
        except Exception as e:
            error("Unknown error: %s" % str(e), code=ARCHIPEL_INIT_ERROR_UNKNOWN)

    # start the daemon main loop
    main(config)
