#!/usr/bin/python -W ignore::DeprecationWarning
#
# runarchipel
#
# Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os, sys, commands
import new
import getopt
import xmpp
import socket

from archipel.utils import *
import archipel
import archipel.libvirtEventLoop
import archipel.archipelHypervisor


## error codes
ARCHIPEL_INIT_SUCCESS           = 0
ARCHIPEL_INIT_ERROR_NO_CONFIG   = 1
ARCHIPEL_INIT_ERROR_NO_MODULE   = 2
ARCHIPEL_INIT_ERROR_BAD_LIBVIRT = 3
ARCHIPEL_INIT_ERROR_UNKNOWN     = 4


## help message
ARCHIPEL_CMD_HELP   = """\
Archipel Agent (c) 2010 Antoine Mercadal

usage: runarchipel [--nofork] [--config=</path/to/conf>]

Options :
* --nofork : run archipel in the current process. Do not fork. This is for testing.
* --config : The path of the config file to use. Default is /etc/archipel/archipel.conf
"""

def test_libvirt():
    """test if all needed libvirt's function are present"""
    try:
        import libvirt
    except:
        print "\n\n\033[31mERROR: you need python libvirt module. I can't import it.\033[0m\n"
        return False
    try:
        getattr(libvirt.virConnect, "domainEventRegisterAny")
    except:
        print "\n\n\033[31mERROR: your libvirt copy doesn't handle Events correctly. please update to 0.8.3+.\033[0m\n"
        return False
    return True


def versions():
    import pkg_resources
    print "* Archipel Agent version : "
    print ("archipelagent", pkg_resources.get_distribution("archipel-agent").version)    
    print "* Installed plugins versions : "
    for version_method in pkg_resources.iter_entry_points(group="archipel.plugin", name="version"):
        method  = version_method.load()
        print method()
    

def main():
    """
    main function of Archipel
    """
    # starting thre libvirt event loop
    archipel.libvirtEventLoop.virEventLoopPureStart()
    # initializing the hypervisor XMPP entity
    jid         = xmpp.JID(config.get("HYPERVISOR", "hypervisor_xmpp_jid"))
    password    = config.get("HYPERVISOR", "hypervisor_xmpp_password")
    database    = config.get("HYPERVISOR", "hypervisor_database_path")
    name        = config.get("HYPERVISOR", "hypervisor_name")
    jid.setResource(socket.gethostname())
    hyp = archipel.archipelHypervisor.TNArchipelHypervisor(jid, password, config, name, database)
    hyp.connect()
    hyp.loop()


if __name__ == "__main__":
    if not test_libvirt(): sys.exit(ARCHIPEL_INIT_ERROR_BAD_LIBVIRT)

    opts, args = getopt.getopt(sys.argv[1:], "hnv", ["nofork", "config=", "help", "version"])

    configPath = "/etc/archipel/archipel.conf"
    fork = True

    for o, a in opts:
        if o in ("--config"): configPath = a
        if o in ("-n", "--nofork"): fork = False
        if o in ("-h", "--help"):
            print ARCHIPEL_CMD_HELP
            sys.exit(ARCHIPEL_INIT_SUCCESS)
        if o in ("-v", "--version"):
            versions()
            sys.exit(ARCHIPEL_INIT_SUCCESS)
    
    try:
        config = init_conf(configPath)
    except:
        print "\033[31mCONFIG: unable to read configuration file %s\033[0m" % configPath
        sys.exit(ARCHIPEL_INIT_ERROR_NO_CONFIG)

    if fork:
        try:
            pid = os.fork()
            if pid == 0: main()
            else: sys.exit(ARCHIPEL_INIT_SUCCESS)
        except OSError as e:
            sys.exit(ARCHIPEL_INIT_ERROR_UNKNOWN)
    else:
        hyp = None
        try:
            main()
        except KeyboardInterrupt:
            sys.exit(ARCHIPEL_INIT_SUCCESS)