#! /usr/bin/python
#
# buildAgent
#
# Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os
from optparse import OptionParser

PATH    = os.path.dirname(os.path.realpath(__file__))


def clean_build(path, notexit=False):
    """clean build"""
    os.system('find %s -maxdepth 2 -name "*.egg-info" -type d -exec rm -rf "{}" \;' % path)
    os.system('find %s -maxdepth 2 -name "build" -type d -exec rm -rf "{}" \;' % path)
    os.system('find %s -maxdepth 2 -name "dist" -type d -exec rm -rf "{}" \;' % path)
    os.system('find %s -maxdepth 2 -name "temp" -type d -exec rm -rf "{}" \;' % path)
    print "\033[32mSUCCESS: build cleaned \033[0m\n"
    if not notexit: sys.exit(0)


def devinstallation(path):
    """force reinstall"""
    for plugin_folder in os.listdir(path):
        if os.path.isdir(plugin_folder) and (plugin_folder.startswith("archipel-agent") or plugin_folder.startswith("archipel-core")):
            cmd = "easy_install -m %s ; easy_install -H None -f %s -U -a --no-deps %s" % (plugin_folder, path, plugin_folder)
            os.system(cmd)
    print "\033[32mSUCCESS: installation done \033[0m\n"
    sys.exit(0)


def process(path, build, upload, register, clean, devinstall):
    """parse command"""
    for plugin_folder in os.listdir(path):
        if os.path.isdir(plugin_folder) and (plugin_folder.startswith("archipel-agent") or plugin_folder.startswith("archipel-core")):
            os.chdir(plugin_folder)
            if register:                os.system("python setup.py register")
            if build and not upload:    os.system("python setup.py bdist_egg")
            elif build and upload:      os.system("python setup.py bdist_egg upload")
            elif build and register:    os.system("python setup.py bdist_egg upload")
            os.chdir("..")
    print "\033[32mSUCCESS: all action performed \033[0m\n"


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-b", "--build",
                        dest="build",
                        help="build the bdist_egg target",
                        action="store_true",
                        default=False)
    parser.add_option("-u", "--upload",
                        dest="upload",
                        help="upload to pypi using your .pypirc",
                        action="store_true",
                        default=False)
    parser.add_option("-r", "--register",
                        dest="register",
                        help="register to pypi using your .pypirc",
                        action="store_true",
                        default=False)
    parser.add_option("-c", "--clean",
                        dest="clean",
                        help="clean build",
                        action="store_true",
                        default=False)
    parser.add_option("-d", "--devinstall",
                        dest="devinstall",
                        help="force reinstallation (for developers)",
                        action="store_true",
                        default=False)

    options, args = parser.parse_args()


    if not (options.devinstall or options.clean) and not (options.build or options.register or options.upload):
        parser.error("Wrong usage. see --help for help")
    os.chdir(PATH)
    if options.clean or options.devinstall:
        clean_build(PATH, options.devinstall)
    if options.devinstall:
        devinstallation(PATH)
    process(PATH, options.build, options.upload, options.register, options.clean, options.devinstall)
