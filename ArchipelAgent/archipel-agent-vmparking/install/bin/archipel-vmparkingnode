#!/usr/bin/python -W ignore::DeprecationWarning
#
# archipel-vmrequestnode
#
# Copyright (C) 2010 Antoine Mercadal <antoine.mercadal@inframonde.eu>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.archipel-vmrequestnode


import os
import sys
from optparse import OptionParser
import xmpp
import archipelcore.pubsub
from archipelcore.scriptutils import *


NODENAME_VMPARKING = "/archipel/vmparking"

def create(xmppclient, pubsubserver):
    """
    Create the pubsub node
    """
    config = {
            archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL: archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL_AUTHORIZE,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_PUBLISH_MODEL: archipelcore.pubsub.XMPP_PUBSUB_VAR_ACCESS_MODEL_AUTHORIZE,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_DELIVER_NOTIFICATION: 1,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_MAX_ITEMS: 99,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_PERSIST_ITEMS: 1,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_NOTIFY_RECTRACT: 1,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_DELIVER_PAYLOADS: 1,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_SEND_LAST_PUBLISHED_ITEM: archipelcore.pubsub.XMPP_PUBSUB_VAR_SEND_LAST_PUBLISHED_ITEM_NEVER,
            archipelcore.pubsub.XMPP_PUBSUB_VAR_ITEM_REPLY: archipelcore.pubsub.XMPP_PUBSUB_VAR_ITEM_REPLY_PUBLISHER
    }
    create_pubsub(xmppclient, pubsubserver, NODENAME_VMPARKING, config)


def delete(xmppclient, pubsubserver):
    """
    Delete the pubsub node
    """
    delete_pubsub(xmppclient, pubsubserver, NODENAME_VMPARKING)


def list_affiliations(xmppclient, pubsubserver):
    """
    List the affiliatons
    """
    pubSubNode = get_pubsub(xmppclient, pubsubserver, NODENAME_VMPARKING)
    if pubSubNode.fetch_affiliations(wait=True):
        if len(pubSubNode.affiliations) == 0: print "Parking authorized accounts"
        for jid, aff in pubSubNode.affiliations.items():
            print " - %s (%s)" % (jid, aff)
    else:
        error("Unable to add set affiliation to node %s" % NODENAME_VMPARKING)


def set_affiliation(xmppclient, account, affiliation, pubsubserver):
    """
    Set the affiliation of an account
    @type jid: xmpp.JID
    @param jid: what
    """
    check_valid_jid(account, bare=True)
    pubSubNode = get_pubsub(xmppclient, pubsubserver, NODENAME_VMPARKING)
    if pubSubNode.set_affiliation(account, affiliation, wait=True):
        success("JID %s has been inserted as publisher" % account)
    else:
        error("Unable to add set affiliation to account %s" % account)



if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-j", "--jid",
                        dest="jid",
                        help="set the JID to use",
                        metavar="user@domain")
    parser.add_option("-p", "--password",
                        dest="password",
                        help="set the password associated to the JID",
                        metavar="123456")
    parser.add_option("-P", "--pubsubserver",
                        dest="pubsubserver",
                        help="set the pubsubserver to use. if not given it will be pubsub.[jid.getDomain()]",
                        metavar="pubsub.domain",
                        default=None)
    parser.add_option("-c", "--create",
                        action="store_true",
                        dest="create",
                        help="create the node (default action)")
    parser.add_option("-d", "--delete",
                        action="store_true",
                        dest="delete",
                        help="delete the node")
    parser.add_option("-a", "--authorize",
                        dest="auth",
                        help="authorize an hypervisor to handle the parking",
                        metavar="user@domain")
    parser.add_option("-u", "--unauthorize",
                        dest="unauth",
                        help="unauthorize an hypervisor to handle the parking",
                        metavar="user@domain")
    parser.add_option("-l", "--list",
                        action="store_true",
                        dest="list",
                        help="List authorized accounts")

    options, args = parser.parse_args()

    xmppclient = initialize(options)

    if options.list:
        list_affiliations(xmppclient, options.pubsubserver)

    elif options.auth:
        set_affiliation(xmppclient, xmpp.JID(options.auth), archipelcore.pubsub.XMPP_PUBSUB_AFFILIATION_PUBLISHER, options.pubsubserver)

    elif options.unauth:
        set_affiliation(xmppclient, xmpp.JID(options.unauth), archipelcore.pubsub.XMPP_PUBSUB_AFFILIATION_NONE, options.pubsubserver)

    elif options.create:
        create(xmppclient, options.pubsubserver)

    elif options.delete:
        delete(xmppclient, options.pubsubserver)